@page "/library/1"

<PageTitle>Козиев.А.Б., В.В. Подколзин - Приложение автоматизации учета выполненной работы на подготовительных курсах вуза</PageTitle>

<div class="mb-4">
    <h5><b>Приложение автоматизации учета выполненной работы на подготовительных курсах вуза</b></h5>
    <b>Авторы:</b> Козиев.А.Б., В.В. Подколзин<br />
    <b>Источник:</b> Прикладная математика: современные проблемы математики, информатики и моделирования: материалы V Всероссийской научно-практической конференции, молодых ученых, г. Краснодар, 11–15 апреля 2023 г. Краснодарский ЦНТИ – филиал ФГБУ «РЭА», 2023 С. 335-339
</div>
<div>
    <p>
        В вузах существуют подготовительные программы для людей, планирующих поступление. Абитуриент посещает приемную комиссию, где ему помогают с выбором программы и графика, по которому ему будет удобно обучаться, после чего он оформляет договор(один на учебную программу) с вузом и вносит либо полную сумму за обучение, либо 40% от общей стоимости. В дальнейшем слушателю курса назначают учебную группу, и он приступает к обучению. Слушатель может быть отчислен по нескольким причинам:
    </p>
    <ul>
        <li>успешное окончание курса;</li>
        <li>неуспеваемость.</li>
    </ul>
    <p>Также в течение курса слушатель может перевестись в другую группу.</p>
    <p>При разработке приложения построена модель, включающая в себя сущности, соответствующие таблицам в СУБД, связи между ними, а также функциональные блоки. Для создания связи между приложением и PostgreSQL используется библиотека Npgsql, Entity Framework отвечает за работу с моделью, генерацию запросов и реверс-инжиниринг, пользовательский интерфейс разработан на основе UI фреймворка WinForms, для контроля версий используется GIT.</p>
    <p>Функциональные блоки:</p>
    <ol>
        <li>
            доступ к данным;<br />
            В приложении данные представлены в табличном виде. В некоторых формах есть несколько таблиц, отображающих информацию в зависимости от выделенных данных, например, при выделении слушателя в таблице с договорами отобразятся соответствующие для него данные.
        </li>
        <li>добавление/изменение/удаление данных;</li>
        <li>
            детализация данных;<br />
            В таблицах присутствует только основная информация, все данные отображаются в отдельном месте на интерфейсе пользователя.
        </li>
        <li>поиск данных;</li>
        <li>фильтрация данных.</li>
    </ol>
    <p>Сущности, составляющие модель:</p>
    <ol>
        <li>слушатель;</li>
        <li>договор;</li>
        <li>учебная группа;</li>
        <li>информация о договоре;</li>
        <li>информация о группе;</li>
        <li>программа;</li>
        <li>преподаватель;</li>
        <li>кафедра;</li>
        <li>отдел.</li>
    </ol>
    <p>Для обеспечения абстракции для доступа к данным в объектно-ориентированном приложении используется технология ORM(Object-Relational Mapping), в частности Entity Framework.</p>
    <p>Основное преимущество EF Core – предоставление разработчикам программного обеспечения возможность быстрого написания кода доступа к базе данных.[<a href="library/1/#1">1</a>]</p>
    <p>В некоторых случаях при разработке приложений с использованием Entity Framework появляется задача улучшения производительности путем конфигурирования ORM. Для работы с таблицами, как с объектами в проекте приложения строится модель данных, которая состоит из классов, представляющих таблицы из БД. Экземпляры классов хранятся в специальных структурах типа DbSet, а сами структуры – в контексте данных. Контекст данных – это класс, который наследует DbContext. Все запросы к модели осуществляются через контекст данных.</p>
    <p>При первом создании запроса к модели в Entity Framework выполняются процессы для загрузки и проверки модели. Первый запрос чаще называют "холодным" запросом. Дальнейшие запросы чаще называют "теплыми" запросами в силу того, что они выполняются быстрее. Ускорение выполнения запроса связано с тем, что после "холодного" запроса определенные данные сохраняются в кэше.</p>
    <p>После "холодного" запроса в кэш попадают метаданные, представление, материализатор и запрос.</p>
    <p>Факторы, наиболее сильно влияющие на производительность:</p>
    <ul>
        <li>размер модели;</li><br />
        Размер модели - количество сущностей и связей между ними.
        <li>сложность модели;</li>
        <li>использование независимых ассоциаций вместо внешних ключей для связывания сущностей.</li>
    </ul>
    <p>Способы повышения производительности:</p>
    <ul>
        <li>использование заранее созданных представлений;</li><br />
        При использовании заранее созданных представлений увеличивается производительность Entity Framework, но при этом возрастают временны́е затраты на разработку.
        <li>использование внешних ключей для связывания сущностей;</li>
        <li>перемещение модели в отдельную сборку;</li>
        <li>отключение проверки модели, основанной на edmx;</li>
        <li>отключение отслеживания состояния сущности;</li>
        <li>компилирование запросов при помощи класса CompiledQuery;</li>
        <li>разделение большой модели на маленькие модели.</li>
    </ul>
    <p>Также желательно использовать контекст в рамках одного запроса. Контекст в Entity Framework предназначен для использования в качестве кратковременных экземпляров, чтобы обеспечить оптимальную производительность. Как правило, следует избегать наличия экземпляра контекста на протяжении всего времени существования приложения, а также контекстов для каждого потока и статических контекстов.[<a href="library/1/#2">2</a>]</p>
    <p>Для анализа производительности используется Visual Studio Performance Profiler – это профилировщик, встроенный в Visual Studio, который предоставляет инструменты отладки, например анализ нагрузки на процессор. Этот инструмент запускается вместе с рабочей программой и фиксирует активность процессора на временно́м отрезке. Вместе с этим есть возможность проверить участки кода, нагружающие процессор, а также его процентную загруженность. Помимо Visual Studio Performance Profiler существуют коммерческие Entity Framework Profiler и ORMProfiler, которые выполняют динамический анализ работающего приложения в рабочей среде в зависимости от потребностей и осуществляет поиск распространенных ошибок и антишаблонов доступа к базам данных.</p>
    <p>В Entity Framework можно настроить средство журналирования, которое сохраняет информацию о выполняемых операциях в текстовый файл. Например, это можно использовать для анализа генерируемых SQL-запросов.</p>

    <h5><b>Библиографический список</b></h5>
    <ol>
        <li>Джон П. Смит Entity Framework Core в действии / пер. с англ. Д. А. Беликова. – Москва : ДМК Пресс, 2022. – 690 с. – ISBN 978-5-93700-114-6.<a id="1"></a></li>
        <li>Performance considerations for EF 4, 5, and 6 – [Электронный ресурс] – (Eng) – URL:</li>
        <a href="https://learn.microsoft.com/en-us/ef/ef6/fundamentals/performance/perf-whitepaper?redirectedfrom=MSDN#22-factors-that-affect-view-generation-performance">https://learn.microsoft.com/en-us/ef/ef6/fundamentals/performance/perf-whitepaper?redirectedfrom=MSDN#22-factors-that-affect-view-generation-performance</a>
        <a id="2"></a>
    </ol>
</div>


@code {

}
